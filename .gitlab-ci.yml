# `.gitlab-ci.yml` - Version 3 (Adding Cache & Needs for Optimization)

# Define the stages
stages:
 - prepare  # New stage for installing dependencies once
 - validate # Run code checks
 - build    # Compile code

default:
 image: node:18
 tags:
   - docker

# --- Prepare Stage ---

install_deps:
 stage: prepare
 script:
   - echo "Installing dependencies..."
   - npm ci
 cache: # Define the cache for node_modules
   key:
     files:
       - package-lock.json # Cache is invalidated if lock file changes
   paths:
     - node_modules/      # Cache this directory
   policy: pull-push       # Download cache at start, upload updated cache at end

# --- Validate Stage ---

lint_code:
 stage: validate
 script:
   - echo "Running linter..."
   - npm run lint
 needs: [install_deps] # Specify that this job needs 'install_deps' to complete first
 cache: # Reuse the cache created by install_deps
   key:
     files:
       - package-lock.json
   paths:
     - node_modules/
   policy: pull # Only download the cache, don't re-upload

test_code:
 stage: validate
 script:
   - echo "Running unit tests..."
   - npm run test
 needs: [install_deps] # Also needs dependencies installed first
 cache: # Reuse the cache
   key:
     files:
       - package-lock.json
   paths:
     - node_modules/
   policy: pull

# --- Build Stage ---

compile_code: # Renamed from build_app for clarity
 stage: build
 script:
   - echo "Compiling TypeScript..."
   - npm run build
 needs: [install_deps] # Needs dependencies, but can run alongside validate jobs if desired
                      # Or add needs: [lint_code, test_code] to run after validation
 cache: # Reuse the cache
   key:
     files:
       - package-lock.json
   paths:
     - node_modules/
   policy: pull
 # Optional: If we wanted to save compiled JS as artifact:
 # artifacts:
 #   paths:
 #     - lib/**/*.js
 #     - bin/**/*.js
 #   expire_in: 1 day