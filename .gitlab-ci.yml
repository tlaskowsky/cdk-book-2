# .gitlab-ci.yml - Version 4 (Adding Synth Stage)

# Define the stages
stages:
  - prepare
  - validate
  - synth    # <-- Add synth stage

default:
  image: node:18
  tags:
    - docker

# --- Prepare Stage ---

install_deps:
  stage: prepare
  script:
    - echo "Installing dependencies..."
    - npm ci
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - node_modules/
    policy: pull-push

# --- Validate Stage ---

lint_code:
  stage: validate
  script:
    - echo "Running linter..."
    - npm run lint
  needs: [install_deps]
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - node_modules/
    policy: pull

test_code:
  stage: validate
  script:
    - echo "Running unit tests..."
    - npm run test
  needs: [install_deps]
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - node_modules/
    policy: pull

# --- Synth Stage --- <-- NEW STAGE & JOB

synthesize_template:
  stage: synth
  before_script: # Configure AWS credentials for this job
    - echo "Configuring AWS credentials for synth..."
    - apt-get update -y && apt-get install -y awscli
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION
    - echo "AWS configuration complete."
  script:
    - echo "Compiling TypeScript (needed for synth)..."
    - npm run build # Synth requires compiled JS code
    - echo "Synthesizing CloudFormation templates..."
    # Synthesize the main stack (adjust if you have multiple)
    - npx cdk synth MagicmailInfraStack
    # Optional: Synthesize other stacks if needed, like the GitLab server stack
    # - npx cdk synth GitLabServerStack
  needs: [install_deps] # Needs dependencies installed
  cache: # Reuse the cache
    key:
      files:
        - package-lock.json
    paths:
      - node_modules/
    policy: pull
  artifacts: # Save the synth output
    paths:
      - cdk.out/
    expire_in: 1 day